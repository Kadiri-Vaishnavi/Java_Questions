DSA : is a way of organizing and storing data

array, linked list : linear formats
stacks, queus : specific rules (LIFO. FIFO) 
trees, graphs : hierarchical and networked

types of ds:

linear :
array
linkedlist
stack
queue

non-linear:
trees
graphs
hash tables

arrays:

//define an array and print the sum of the elements of the array
class Main {
    public static void main(String[] args) {
        int[] arr = {1,2,3,4,5};
        int sum=0;
        for(int i=0;i<arr.length;i++){
            sum=sum+arr[i];
        }
        System.out.println(sum);
    }
}


//print the largest element of a array
class Main {
    public static void main(String[] args) {
        int[] arr = {1,2,3,4,5};
        int largest=0;
        for(int i=0;i<arr.length;i++){
            if(arr[i]>largest){
                largest=arr[i];
            }
            
        }
        System.out.println(largest);
    }
}


//reverse the elements of an array
class Main {
    public static void main(String[] args) {
        int[] arr = {1,2,3,4,5};
       
        for(int i=arr.length-1;i>=0;i--){
            System.out.print(arr[i]+" ");
            
        }
       
    }
}

//sorting an array

import java.util.Arrays;
class Main {
    public static void main(String[] args) {
        int[] arr = {1,2,3,5,4};
        
        Arrays.sort(arr);
        System.out.println(Arrays.toString(arr));
       
       
    }
}


Linked list:

node contains data and the pointer of next node
single
double
circular

//Create new linkedList where you can insert a new node at the beginning and print the list...
import java.util.*;

class Node{
    int data;
    Node next;
    
    public Node(int data){
        this.data=data;
        this.next=null;
    }
}

class LinkedList{
    Node head;
    public void insertAtBeginning(int data){
        Node newNode=new Node(data);
        newNode.next=head;
        head=newNode;
    }
    public void printlist(){
        Node temp=head;
        while(temp!=null){
            System.out.print(temp.data+"->");
            temp=temp.next;
        }
        System.out.println("null");
    }
}

public class Main{
    public static void main(String[] args){
        LinkedList list=new LinkedList();
        list.insertAtBeginning(10);
        list.insertAtBeginning(20);
        list.insertAtBeginning(30);
        list.printlist();
    } 
}

//insert at the end
import java.util.*;

class Node{
    int data;
    Node next;
    
    public Node(int data){
        this.data=data;
        this.next=null;
    }
}

class LinkedList{
    Node head;
    public void insertAtEnd(int data){
        Node newNode=new Node(data);
        if(head == null){
            head=newNode;
            return;
        }
        Node temp=head;
        while(temp.next!=null){
            temp=temp.next;
        }
        temp.next=newNode;
    }
    public void printlist(){
        Node temp=head;
        while(temp!=null){
            System.out.print(temp.data+"->");
            temp=temp.next;
        }
        System.out.println("null");
    }
}

public class Main{
    public static void main(String[] args){
        LinkedList list=new LinkedList();
        list.insertAtEnd(10);
        list.insertAtEnd(20);
        list.insertAtEnd(30);
        list.printlist();
    } 
}


//deletion from the end

class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    Node head;

    // Insert a new node at the beginning
    public void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }
    
    // Insert a new node at the end
    public void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
    }

    // Delete a node from the end
    public void deleteFromEnd() {
        if (head == null) {
            return; // List is empty
        }
        if (head.next == null) {
            head = null; // Only one element
            return;
        }
        Node temp = head;
        while (temp.next.next != null) {
            temp = temp.next;
        }
        temp.next = null;
    }

    // Print the linked list
    public void printList() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        list.insertAtBeginning(10);
        list.insertAtBeginning(20);
        list.insertAtBeginning(30);
        list.insertAtEnd(40);
        list.insertAtEnd(50);
        list.printList();  
        
        list.deleteFromEnd();
        list.printList(); 
    }
}

class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    Node head;

    // Insert a new node at the beginning
    public void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }
    
    // Insert a new node at the end
    public void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
    }

    // Delete a node from the end
    public void deleteFromEnd() {
        if (head == null) {
            return; // List is empty
        }
        if (head.next == null) {
            head = null; // Only one element
            return;
        }
        Node temp = head;
        while (temp.next.next != null) {
            temp = temp.next;
        }
        temp.next = null;
    }

    // Delete a node at a specific position
    public void deleteAtPosition(int position) {
        if (head == null || position < 0) {
            return;
        }
        if (position == 0) {
            head = head.next;
            return;
        }
        Node temp = head;
        for (int i = 0; temp != null && i < position - 1; i++) {
            temp = temp.next;
        }
        if (temp == null || temp.next == null) {
            return;
        }
        temp.next = temp.next.next;
    }

    // Print the linked list
    public void printList() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        list.insertAtBeginning(10);
        list.insertAtBeginning(20);
        list.insertAtBeginning(30);
        list.insertAtEnd(40);
        list.insertAtEnd(50);
        list.printList();  // Output: 30 -> 20 -> 10 -> 40 -> 50 -> null
        
        list.deleteFromEnd();
        list.printList();  // Output: 30 -> 20 -> 10 -> 40 -> null
        
        list.deleteAtPosition(2);
        list.printList();  // Output: 30 -> 20 -> 40 -> null
    }
}

//sorting --leetcode (148)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }

        ListNode current = head;
        while (current != null) {
            ListNode index = current.next;
            while (index != null) {
                if (current.val > index.val) {
                    // Swap values
                    int temp = current.val;
                    current.val = index.val;
                    index.val = temp;
                }
                index = index.next;
            }
            current = current.next; // Move current to the next node
        }
        return head;
    }
}


stack:

// Stack implementation in Java

class Stack {


  private int arr[];

  private int top;

  private int capacity;


  Stack(int size) {

    arr = new int[size];
    capacity = size;
    top = -1;
  }

  public void push(int x) {
    if (isFull()) {
      System.out.println("Stack OverFlow");


      System.exit(1);
    }

    System.out.println("Inserting " + x);
    arr[++top] = x;
  }


  public int pop() {

    if (isEmpty()) {
      System.out.println("STACK EMPTY");

      System.exit(1);
    }

    return arr[top--];
  }


  public int getSize() {
    return top + 1;
  }

  public Boolean isEmpty() {
    return top == -1;
  }

  public Boolean isFull() {
    return top == capacity - 1;
  }


  public void printStack() {
    for (int i = 0; i <= top; i++) {
      System.out.print(arr[i] + ", ");
    }
  }
}
public class Main{
  public static void main(String[] args) {
    Stack stack = new Stack(5);

    stack.push(5);
    stack.push(10);
    stack.push(15);
    stack.push(20);
    stack.push(25);
    stack.push(30); //stack overflow

    System.out.print("Stack: ");
    stack.printStack();

    stack.pop();
    stack.pop();

    System.out.println("\nAfter popping out");
    stack.printStack();
}
  
}
//condition 2
public class Main{
  public static void main(String[] args) {
    Stack stack = new Stack(5);

    //stack empty

    System.out.print("Stack: ");
    stack.printStack();

    stack.pop();
    stack.pop();

    System.out.println("\nAfter popping out");
    stack.printStack();
}
  
}
