//doubly linkedlist

class Node {
    int data;
    Node next;
    Node prev;

    public Node(int data) {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}

class DoublyLinkedList {
    Node head;

    // Insert at the end
    public void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
        newNode.prev = temp;
    }

    // Print the list forward
    public void printList() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " <-> ");
            temp = temp.next;
        }
        System.out.println("null");
    }
}

public class Main {
    public static void main(String[] args) {
        DoublyLinkedList list = new DoublyLinkedList();
        list.insertAtEnd(10);
        list.insertAtEnd(20);
        list.insertAtEnd(30);

        System.out.println("Doubly Linked List:");
        list.printList();
    }
}


class Node {
    int data;
    Node next;
    Node prev;

    Node(int data) {
        this.data = data;
        next = null;
        prev = null;
    }
}

public class DoublyLinkedList {
    Node head;

    public void insert(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        newNode.next = head;
        head.prev = newNode;
        head = newNode;
    }

    public void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + "<->");
            temp = temp.next;
        }
        System.out.println("NULL");
    }

    public void deleteAtBeginning() {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }
        head = head.next;
        if (head != null) {
            head.prev = null;
        }
    }

    public void insertEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
        newNode.prev = temp;
    }

    public void insertAtPosition(int data, int position) {
        if (position < 0) {
            System.out.println("Invalid Position");
            return;
        }
        if (position == 0) {
            insert(data);
            return;
        }
        Node newNode = new Node(data);
        Node temp = head;
        int cur = 0;
        while (temp != null && cur < position - 1) {
            temp = temp.next;
            cur++;
        }

        newNode.next = temp.next;
        if (temp.next != null) {
            temp.next.prev = newNode;
        }
        temp.next = newNode;
        newNode.prev = temp;
    }
    public void deleteAtfirst(){
        if (head == null) {
            System.out.println("List is empty");
            return;
        }
        head = head.next;
        head.prev = null;
    }
    public void deleteAtEnd() {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }

        Node temp = head;
        while(temp.next.next!=null){
            temp=temp.next;
        }
        temp.next=null;
    }
    public void deleteAtPosition(int position) {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }
        Node temp = head;
        int cur = 0;
        while (temp != null && cur < position - 1) {
            temp = temp.next;
            cur++;
        }

        if (temp.next != null) {
            temp.next.prev = temp.prev;
        }
        if (temp.prev != null) {
            temp.prev.next = temp.next;
        }

    }
    public void Count(){
        Node temp = head;
        int count = 0;
        while(temp!=null){
            count++;
            temp=temp.next;
        }
        System.out.print(count);
    }
        public void displayReverse() {
        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        while (temp != null) {
            System.out.print(temp.data + "<->");
            temp = temp.prev;
        }
        System.out.println();
    }
    public static void main(String[] args) {
        DoublyLinkedList list = new DoublyLinkedList();
        list.insert(1);
        list.insert(2);
        list.insert(3);
        list.insert(4);
        list.insert(5);
        list.display();
        System.out.println("Reverse List");
        list.displayReverse();
        list.display();
        System.out.println("Delete at Beginning");
        list.deleteAtBeginning();
        list.display();
        System.out.println("Insert into Beginning");
        list.insert(6);
        list.display();
        System.out.println("Insert into End");
        list.insertEnd(7);
        list.display();
        System.out.println("Insert into Position");
        list.insertAtPosition(10, 2);
        list.display();
        System.out.println("Delete at First");
        list.deleteAtfirst();
        list.display();
        System.out.println("Delete at End");
        list.deleteAtEnd();
        list.display();
        System.out.println("Delete at Position");
        list.deleteAtPosition(2);
        list.display();
        System.out.println("Count the number of elements");
        list.Count();
    }
}


circular linked list:
class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class CircularLinkedList {
    Node head;

    public void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            head.next = head; 
            return;
        }

        Node temp = head;
        while (temp.next != head) { 
            temp = temp.next;
        }

        temp.next = newNode;
        newNode.next = head; 
    }


    public int countNodes() {
        if (head == null) {
            return 0;
        }
        int count = 0;
        Node temp = head;
        do {
            count++;
            temp = temp.next;
        } while (temp != head); 
        return count;
    }

    
    public void printList() {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }
        Node temp = head;
        do {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        } while (temp != head);
        System.out.println("(Back to Head)");
    }
}

public class Main {
    public static void main(String[] args) {
        CircularLinkedList list = new CircularLinkedList();
        list.insertAtEnd(10);
        list.insertAtEnd(20);
        list.insertAtEnd(30);
        list.insertAtEnd(40);

        System.out.println("Circular Linked List:");
        list.printList();

        System.out.println("Number of nodes: " + list.countNodes());
    }
}


//convert a normal array into a singly linked list

class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    Node head;

    // Function to convert an array into a singly linked list
    public void convertArrayToList(int[] arr) {
        if (arr.length == 0) {
            return; // If the array is empty, do nothing
        }

        head = new Node(arr[0]); // Create the first node
        Node temp = head;

        for (int i = 1; i < arr.length; i++) {
            temp.next = new Node(arr[i]); // Create a new node and link it
            temp = temp.next;
        }
    }

    // Function to print the linked list
    public void printList() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        int[] arr = {10, 20, 30, 40, 50}; // Normal array

        list.convertArrayToList(arr); // Convert array to linked list
        System.out.println("Converted Linked List:");
        list.printList(); // Print the linked list
    }
}


