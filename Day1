//program to check weather the year is leap year or not

import java.util.Scanner;
class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int year=sc.nextInt();
        if(year%4==0 && year%100!=0 || year%400==0){
            System.out.println("Leap year");
        }
        else{
            System.out.println("Not a leap year!");
        }
    }
}


//create a calculator using switch case


import java.util.Scanner;
class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter first number: ");
        int num1=sc.nextInt();
        System.out.println("Enter second number: ");
        int num2=sc.nextInt();
        System.out.println("1.add 2.subtract 3.multiply 4.divide 5.modulus");
        System.out.println("Choose type of calculation: ");
        int cal=sc.nextInt();
        switch(cal){
            case 1:
                System.out.println(num1+num2);
                break;
            case 2:
                System.out.println(num1-num2);
                break;
            case 3:
                System.out.println(num1*num2);
                break;
            case 4:
                if(num2!=0){                  
                    System.out.println(num1/num2);
                }
                else{
                    System.out.println("Error zero is not allowed!");
                }
                break;
            case 5:
                if(num2!=0){
                    System.out.println(num1%num2);
                }
                else{
                    System.out.println("Error zero is not allowed!");
                }
                break;
                default:
                    System.out.println("Please choose between 1-5");
        }
    }
}


//to create a pattern "*" as right angle triangle

import java.util.Scanner;
class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter number of rows: ");
        int rows=sc.nextInt();
        for(int i=1;i<=rows;i++){
            for(int j=1;j<=i;j++){
                System.out.print("*");
            }
            System.out.println();
        }
       
    }   
}

//pattern of "*" as left angle triangle

import java.util.Scanner;
class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter number of rows: ");
        int rows=sc.nextInt();
        for(int i=1;i<=rows;i++){
            for(int j=1;j<=rows-i;j++){
                System.out.print(" ");
            }
            for(int k=1;k<=i;k++){
                System.out.print("*");
            }
            System.out.println();
        }
       
    }   
}

//pattern of "*" as diamond

import java.util.Scanner;
class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter number of rows: ");
        int rows=sc.nextInt();
        for(int i=1;i<=rows;i++){
            for(int j=1;j<=rows-i;j++){
                System.out.print(" ");
            }
            for(int k=1;k<=2*i-1;k++){
                System.out.print("*");
            }
            System.out.println();
        }
        for(int i=rows-1;i>=1;i--){
            for(int j=1;j<=rows-i;j++){
                System.out.print(" ");
            }
            for(int k=1;k<=2*i-1;k++){
                System.out.print("*");
            }
            System.out.println();
        }
       
    }   
}

//butterfly pattern with "*"


import java.util.Scanner;
class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter number of rows: ");
        int rows=sc.nextInt();
        for(int i=1;i<=rows;i++){
            for(int j=1;j<=i;j++){
                System.out.print("*");
            }
            for(int j=1;j<=2*(rows-i);j++){
                System.out.print(" ");
            }
            for(int j=1;j<=i;j++){
                System.out.print("*");
            }
            System.out.println();
        }
        for(int i=rows-1;i>=1;i--){
            for(int j=1;j<=i;j++){
                System.out.print("*");
            }
            for(int j=1;j<=2*(rows-i);j++){
                System.out.print(" ");
            }
            for(int j=1;j<=i;j++){
                System.out.print("*");
            }
            System.out.println();
        }
       
    }   
}


//Hollow diamond with "*"
  
import java.util.Scanner;
class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter number of rows: ");
        int rows=sc.nextInt();
        for(int i=1;i<=rows;i++){
            for(int j=1;j<=rows-i;j++){
                System.out.print(" ");
            }
            for(int j=1;j<=2*i-1;j++){
                if(j==1 || j==2*i-1){
                    System.out.print("*");
                }
                else{
                    System.out.print(" ");
                }
            }
             
            System.out.println();
        }
        for(int i=rows-1;i>=1;i--){
            for(int j=1;j<=rows-i;j++){
                System.out.print(" ");
            }
            for(int j=1;j<=2*i-1;j++){
                if(j==1||j==2*i-1){
                    System.out.print("*");
                }
                else{
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
       
    }   
}

//palindrome number (leet code-9)

class Solution {
    public boolean isPalindrome(int x) {
        int n=x;
        int newnum=0;
        while(x>0){
            int rem=x%10;
            newnum=newnum*10+rem;
            x/=10;
        }
        if(newnum==n){
            return true;
        }
        else{
            return false;
        }

    }
}


//Roman to integer (leet code-13)
class Solution {
    public int romanToInt(String s) {
        int ans=0;
        int num=0;
        for(int i=s.length()-1;i>=0;i--){
            switch(s.charAt(i)){
                case 'I':
                    num=1;
                    break;
                case 'V':
                    num=5;
                    break;
                case 'X':
                    num=10;
                    break;
                case 'L':
                    num=50;
                    break;
                case 'C':
                    num=100;
                    break;
                case 'D':
                    num=500;
                    break;
                case 'M':
                    num=1000;
                    break;
            }
            if(4*num<ans){    //subtraction rule
                ans=ans-num;
            }
            else{
                ans=ans+num;
            }
            
        }
        return ans;
    }
}


//factorial trailing zeroes(leetcode-172)

class Solution {
    public int trailingZeroes(int n) {
        int c=0;
        while(n>0){
            n/=5;
            c+=n;
        }
        return c;
        
    }
}

//number of 1 bits (leet code-191)
class Solution {
    public int hammingWeight(int n) {
        int count=0;
        while(n!=0){
            n=n & (n-1);
            count++;
        }
        return count;
    }
}

//add digits(leet code -258)
class Solution {
    public int addDigits(int num) {
        if(num==0){
            return 0;
        }
        return (num % 9==0)?9:num%9;
    }
}


//reverse integer(leet code -7)
class Solution {
    public int reverse(int x) {
        long ans= 0;

        while (x != 0){
            ans = ans * 10 + x % 10;
            x /= 10;

        }
        return (ans< Integer.MIN_VALUE|| ans> Integer.MAX_VALUE) ? 0 : (int) ans;
    }
}
